RabbitMQ 之 Publish/Subscribe (发布/订阅) 入门
    http://www.rabbitmq.com/tutorials/tutorial-three-java.html

转发器类型: (fanout)

    direct (订阅选择性匹配收到) (处理选择性匹配路由键) (完全匹配条件)
        消息会被推送至绑定键(binging key) 和 消息发布附带的选择键 (routing key) 完全匹配的队列
        默认 "AMQP default", 使用 "" 标识
        如果没有匹配的队列, 消息会被丢弃

        *********************************************************************************************

            |-- debug --|        |队列-1 [debug, info, warn] |--|     C1        |
            |-- info  --|
        P --|-- error --|-- X --|
            |-- warn  --|
            |-- ...   --|        |队列-2 [info, error]       |--|     C2        |

        ---------------- ------------------------------------   ----------------
              生产者                  RabbitMQ 服务器                 消费者

        P 生产者 会生产 debug, info, error, warn 等等各种级别的日志
        然后发送到 X 转发器 (RabbitMQ 服务器)

        C1 消费者 将 队列-1 绑定 X 转发器上 并且告诉 X 转发器 感兴趣的日志级别是 debug, info, warn
        C2 消费者 将 队列-2 绑定 X 转发器上 并且告诉 X 转发器 感兴趣的日志级别是 info, error

        点评: 订阅感兴趣的, 挑挑拣拣

        *********************************************************************************************


    topic  (主题订阅[正则表达式]匹配) (模糊匹配路由) (多重匹配条件)
        * 匹配一个标识符
        # 匹配0个或者N个标识符

        *********************************************************************************************

            |-- debug.Linux.Ubuntu.1.log --|         |队列-1 error.Linux.*.*.log      |--| C1      |
            |-- debug.Linux.CentOS.2.log --|
        P --|-- error.Linux.Ubuntu.1.log --|-- X --| |队列-2 *.Linux.*.*.log          |--| C2      |
            |-- error.Linux.CentOS.2.log --|
            |-- ...log   --|                         |队列-3 #                        |--| C3      |

        ----------------------------------- -----------------------------------------   ----------
              生产者                                   RabbitMQ 服务器                     消费者

        P 生产者位于不同的 Linux 服务器 会生产 debug.Linux.Ubuntu.1.log, debug.Linux.CentOS.2.log 等等各种的日志
        然后发送到 X 转发器 (RabbitMQ 服务器)

        C1 消费者 将 队列-1 绑定 X 转发器上 并且告诉 X 转发器 感兴趣的日志为 error.Linux.*.*.log 格式的
            对应感兴趣的: error.Linux.Ubuntu.1.log 和 error.Linux.CentOS.2.log

        C2 消费者 将 队列-2 绑定 X 转发器上 并且告诉 X 转发器 感兴趣的日志为 *.Linux.*.*.log 格式的
            对应感兴趣的: debug.Linux.Ubuntu.1.log 和 debug.Linux.CentOS.2.log 和 error.Linux.Ubuntu.1.log 和 error.Linux.CentOS.2.log

        C3 消费者 将 队列-3 绑定 X 转发器上 并且告诉 X 转发器 感兴趣的日志为 # 格式的
            对应感兴趣的: 所有的Message(包括 ...log), 等同于 fanout 类型的转发器

        点评: 只要模糊匹配上即可, 不需要十全十美, 完完全全的匹配

        *********************************************************************************************


    fanout (广播订阅即可收到) (不处理路由键直接转发)
        消息发送到转发器, 所有绑定了该转发器的队列都会收到该消息

        *********************************************************************************************

            |-- debug --|        |队列-1      |--| C1      |
            |-- info  --|
        P --|-- error --|-- X --|
            |-- warn  --|
            |-- ...   --|        |队列-2      |--| C2      |

        ---------------- ---------------------   ----------
              生产者          RabbitMQ 服务器        消费者

        P 生产者 会生产 debug, info, error, warn 等等各种级别的日志
        然后发送到 X 转发器 (RabbitMQ 服务器)

        C1 消费者 将 队列-1 绑定 X 转发器上 并且告诉 X 转发器 你收到啥就丢给我啥吧
        C2 消费者 将 队列-2 绑定 X 转发器上 并且告诉 X 转发器 你收到啥就丢给我啥吧

        点评: 管你喜欢不喜欢, 全丢给你

        *********************************************************************************************


    headers (消息头订阅)
        (使用频率最少)
